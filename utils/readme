SpannableStringUtils---实例代码图片,ext

android.support
gson
颜色工具类
StatusBarUtils
CommonUtils-获取资源有关，分辨率，版本
PerfectClickListener   双击消除


AppDatabase   -      /*
                     UserDao userDao = MyApplication.database.userDao();
                     * */
                     
                     
##################   AutoTextview   #########################

<com.yijiequ.view.AutoTextView
    android:id="@+id/home_page_bottom_info"
    android:layout_width="0dp"
    android:layout_height="wrap_content"
    android:layout_marginLeft="12dp"
    android:layout_marginRight="12dp"
    android:layout_weight="1"
    android:ellipsize="end"
    android:lines="1"
    android:text=""
    android:textColor="#373737"
    android:textSize="12sp"
    launcher:type="1" />

</LinearLayout>

    <!--自动滚动txtview color.xml-->
    <color name="home_chat_type">#ff6c00</color>
    <color name="deep_s_gray">#454545</color>

<!--自动滚动txtview arrays.xml-->
<declare-styleable name="type_text">
        <attr name="type" format="integer" />
    </declare-styleable>


##################   RxBus2   #########################
发送消息：
RxBus2.getIntanceBus().post(110,10);
接收消息：
RxBus2.getIntanceBus().doSubscribe(EverydayFragment.class
        ,110
        ,Integer.class
        , integer -> LogUtil.e("============"+integer));
注销：
@Override
public void onDestroy() {
    super.onDestroy();
    RxBus2.unSubscribe(EverydayFragment.class);
}
##################   Http   #########################



##################   Widget   #########################

WebViewWrapper WebView布局

//全屏浏览图片
Intent intent = new Intent(context, ImagesActivity.class);
Bundle bundle = new Bundle();
bundle.putSerializable(ImagesActivity.IMAGE_ATTR, (Serializable) images);
bundle.putInt(ImagesActivity.CUR_POSITION, index);
intent.putExtras(bundle);
context.startActivity(intent);
((Activity) context).overridePendingTransition(0, 0);

##################   GLIDE   #########################

资源来源：https://github.com/sfsheng0322/GlideImageView

application-设置内存相关
BaseAppGlideModule设置默认下载相关

使用方式

GlideApp.with(imageView)
        //图片格式
        .Bitmap()
        .load(url)
        //修改大小
        .override((int) CommonUtils.getDimens(R.dimen.movie_detail_width), (int) CommonUtils.getDimens(R.dimen.movie_detail_height))
        //占位符
        .placeholder(getDefaultPic(2))
        //错误
        .error(getDefaultPic(2))
        //缓存策略
        .diskCacheStrategy(DiskCacheStrategy.ALL)
        //动画
        .transition(new DrawableTransitionOptions().crossFade(500))
        //MultiTransformation 多种属性
        //GlideCircleTransform 加载圆角图 
        //BlurTransformation  "23":模糊度；"4":图片缩放4倍后再进行模糊 
        .transform(new MultiTransformation<>(new GlideCircleTransform(imageView.getContext()),new BlurTransformation(imageView.getContext(),34,4)))
        .into(imageView);
        
image13.setCornerRadius(10);
image13.setBorderWidth(2);
image13.setBorderColor(getResources().getColor(R.color.blue));
image13.setPressedModeEnabled(true);
image13.setPressedBorderWidth(2);
image13.setPressedBorderColor(getResources().getColor(R.color.blue));
image13.setPressedMaskColor(getResources().getColor(R.color.transparent20));
image13.loadImage(url1, R.color.placeholder);
image13.setOnClickListener(v -> {
});

<com.sunfusheng.glideimageview.GlideImageView
    android:id="@+id/image24"
    android:layout_width="80dp"
    android:layout_height="80dp"
    android:layout_margin="5dp"
    android:layout_weight="1"
    android:clickable="true"
    android:focusable="true"
    app:riv_border_color="@color/orange"
    app:riv_border_width="2dp"
    app:riv_is_circle="true"
    app:riv_pressed_border_color="@color/orange"
    app:riv_pressed_border_width="2dp"
    app:riv_pressed_mask_color="@color/placeholder_orange"
    app:riv_pressed_mode_enabled="true"/>

-------------------
public class CustomAppGlideModule extends AppGlideModule {

    @Override
    public void applyOptions(Context context, GlideBuilder builder) {
        super.applyOptions(context, builder);
        //设置内存缓存
        int memoryCacheSizeBytes = 1024 * 1024 * 250; // 250mb
        builder.setMemoryCache(new LruResourceCache(memoryCacheSizeBytes));
        //设置内存缓存
        MemorySizeCalculator calculator = new MemorySizeCalculator.Builder(context)
                .setMemoryCacheScreens(2)
                .build();
        builder.setMemoryCache(new LruResourceCache(calculator.getMemoryCacheSize()));
        //设置默认选项
        builder.setDefaultRequestOptions(
                new RequestOptions()
                        .format(DecodeFormat.PREFER_RGB_565)
                        .diskCacheStrategy(DiskCacheStrategy.ALL)
                        .disallowHardwareConfig());
        //设置日志级别
        builder.setLogLevel(Log.DEBUG);
    }

    /**
     * 完全移除和替换 Glide 对某种特定类型的默认处理，例如一个网络库，你应该使用 replace()
     *
     * @param context
     * @param glide
     * @param registry
     */
    @Override
    public void registerComponents(Context context, Glide glide, Registry registry) {
        super.registerComponents(context, glide, registry);
        registry.replace(GlideUrl.class, InputStream.class, new OkHttpUrlLoader.Factory());
    }

    /**
     * 为了维持对 Glide v3 的 GlideModules 的向后兼容性，
     * Glide 仍然会解析应用程序和所有被包含的库中的 AndroidManifest.xml 文件，
     * 并包含在这些清单中列出的旧 GlideModules 模块类。
     * 如果你已经迁移到 Glide v4 的 AppGlideModule 和 LibraryGlideModule ，
     * 你可以完全禁用清单解析。这样可以改善 Glide 的初始启动时间，并避免尝试解析元数据时的一些潜在问题
     *
     * @return
     */
    @Override
    public boolean isManifestParsingEnabled() {
        return false;
    }
}



使用步骤

Step 1.依赖banner

Gradle

dependencies{
    compile 'com.youth.banner:banner:1.4.10'  //最新版本
}
或者引用本地lib

compile project(':banner')
Step 2.添加权限到你的 AndroidManifest.xml

<!-- if you want to load images from the internet -->
<uses-permission android:name="android.permission.INTERNET" /> 

<!-- if you want to load images from a file OR from the internet -->
<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE" />
Step 3.在布局文件中添加Banner，可以设置自定义属性

！！！此步骤可以省略，直接在Activity或者Fragment中new Banner();

<com.youth.banner.Banner
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:id="@+id/banner"
    android:layout_width="match_parent"
    android:layout_height="高度自己设置" />
Step 4.重写图片加载器

public class GlideImageLoader extends ImageLoader {
    @Override
    public void displayImage(Context context, Object path, ImageView imageView) {
        /**
          注意：
          1.图片加载器由自己选择，这里不限制，只是提供几种使用方法
          2.返回的图片路径为Object类型，由于不能确定你到底使用的那种图片加载器，
          传输的到的是什么格式，那么这种就使用Object接收和返回，你只需要强转成你传输的类型就行，
          切记不要胡乱强转！
         */
        eg：
        
        //Glide 加载图片简单用法
        Glide.with(context).load(path).into(imageView);

        //Picasso 加载图片简单用法
        Picasso.with(context).load(path).into(imageView);
        
        //用fresco加载图片简单用法，记得要写下面的createImageView方法
        Uri uri = Uri.parse((String) path);
        imageView.setImageURI(uri);
    }
    
    //提供createImageView 方法，如果不用可以不重写这个方法，主要是方便自定义ImageView的创建
    @Override
    public ImageView createImageView(Context context) {
        //使用fresco，需要创建它提供的ImageView，当然你也可以用自己自定义的具有图片加载功能的ImageView
        SimpleDraweeView simpleDraweeView=new SimpleDraweeView(context);
        return simpleDraweeView;
    }
}
Step 5.在Activity或者Fragment中配置Banner

注意！start()方法必须放到最后执行，点击事件请放到start()前，每次都提交问题问为什么点击没有反应？需要轮播一圈才能点击？点击第一个怎么返回1？麻烦仔细阅读文档。
--------------------------简单使用-------------------------------
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Banner banner = (Banner) findViewById(R.id.banner);
    //设置图片加载器
    banner.setImageLoader(new GlideImageLoader());
    //设置图片集合
    banner.setImages(images);
    //banner设置方法全部调用完毕时最后调用
    banner.start();
}
--------------------------详细使用-------------------------------
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Banner banner = (Banner) findViewById(R.id.banner);
    //设置banner样式
    banner.setBannerStyle(BannerConfig.CIRCLE_INDICATOR_TITLE);
    //设置图片加载器
    banner.setImageLoader(new GlideImageLoader());
    //设置图片集合
    banner.setImages(images);
    //设置banner动画效果
    banner.setBannerAnimation(Transformer.DepthPage);
    //设置标题集合（当banner样式有显示title时）
    banner.setBannerTitles(titles);
    //设置自动轮播，默认为true
    banner.isAutoPlay(true);
    //设置轮播时间
    banner.setDelayTime(1500);
    //设置指示器位置（当banner模式中有指示器时）
    banner.setIndicatorGravity(BannerConfig.CENTER);
    //banner设置方法全部调用完毕时最后调用
    banner.start();
}
-----------------当然如果你想偷下懒也可以这么用--------------------
@Override
protected void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    setContentView(R.layout.activity_main);
    Banner banner = (Banner) findViewById(R.id.banner);
    banner.setImages(images).setImageLoader(new GlideImageLoader()).start();
}
Step 6.（可选）增加体验

//如果你需要考虑更好的体验，可以这么操作
@Override
protected void onStart() {
    super.onStart();
    //开始轮播
    banner.startAutoPlay();
}

@Override
protected void onStop() {
    super.onStop();
    //结束轮播
    banner.stopAutoPlay();
}
混淆代码

# glide 的混淆代码
-keep public class * implements com.bumptech.glide.module.GlideModule
-keep public enum com.bumptech.glide.load.resource.bitmap.ImageHeaderParser$** {
  **[] $VALUES;
  public *;
}
# banner 的混淆代码
-keep class com.youth.banner.** {
    *;
 }